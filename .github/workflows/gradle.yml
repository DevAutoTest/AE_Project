# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: AE project (API and UI)

on:
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write


    services:
      selenium:
        image: selenium/standalone-chrome:latest
        options: --shm-size 2g
        ports:
          - 4444:4444

    # Стратегия выполнения (матрица для параллельного запуска)
    strategy:
      matrix:
        # Тестируем в двух режимах
        mode: [ GUEST, AUTH ]
        # Дополнительные параметры для каждого режима
        include:
          - mode: GUEST
            report_name: "Guest Mode Report"  # Название отчета для Guest
          - mode: AUTH
            report_name: "Auth Mode Report"  # Название отчета для Auth

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 18
        uses: actions/setup-java@v4
        with:
          java-version: '18'
          distribution: 'temurin'
      
      # Configure Gradle for optimal use in GitHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
        with:
          gradle-version: '8.10'  # Явно указываем версию

      - name: Grant execute permission for Gradle
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew build
      
      # NOTE: The Gradle Wrapper is the default and recommended way to run Gradle (https://docs.gradle.org/current/userguide/gradle_wrapper.html).
      # If your project does not have the Gradle Wrapper configured, you can use the following configuration to run Gradle with a specified version.
      #
      # - name: Setup Gradle
      #   uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
      #   with:
      #     gradle-version: '8.9'
      #
      # - name: Build with Gradle 8.9
      #   run: gradle build

      - name: Build with Gradle Wrapper
        env:
          SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
          # Запускаем тесты через Gradle с параметром режима
        run: ./gradlew clean test -Duser.mode=${{ matrix.mode }}
      
      # Шаг 5: Конфигурация тестовых properties-файлов
      - name: Configure test properties
        env:
          # Получаем секреты из GitHub Secrets
          GUEST_TOKEN: ${{ secrets.GUEST_AUTHORIZATION }}
          AUTH_USERNAME: ${{ secrets.AUTH_USERNAME }}
          AUTH_PASSWORD: ${{ secrets.AUTH_PASSWORD }}
          BASE_URL: "https://www.ae.com"  # Базовый URL (можно вынести в secrets при необходимости)
        run: |
          # Создаем директорию для properties-файлов
          mkdir -p src/test/resources/properties
          
          # В зависимости от режима создаем соответствующий файл
          if [ "${{ matrix.mode }}" = "GUEST" ]; then
            # Конфигурация для гостевого режима
            echo "mode=GUEST" > src/test/resources/properties/guest.properties
            echo "baseUrl=$BASE_URL" >> src/test/resources/properties/guest.properties
            echo "guest.header.authorization=$GUEST_AUTHORIZATION" >> src/test/resources/properties/guest.properties
          else
            # Конфигурация для авторизованного режима
            echo "mode=AUTH" > src/test/resources/properties/auth.properties
            echo "auth.username=$AUTH_USERNAME" >> src/test/resources/properties/auth.properties
            echo "auth.password=$AUTH_PASSWORD" >> src/test/resources/properties/auth.properties
          fi
        # Шаг: Запуск тестов
      - name: Run tests
        env:
          SELENIUM_REMOTE_URL: http://localhost:4444/wd/hub
          # Добавляем переменные для ChromeDriver
          CHROMEWEBDRIVER: /usr/local/bin/chromedriver
          CHROME_BIN: /usr/bin/google-chrome
        run: |
          # Устанавливаем Chrome и ChromeDriver
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable
          wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/chromedriver

          # Запускаем тесты
          ./gradlew clean test -Dmode=${{ matrix.mode }}

      - name: Copy History
        uses: actions/checkout@v2
        if: always()
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build Report
        uses: simple-elf/allure-report-action@v1.10
        if: always()
        with:
          allure_results: build/allure-results
          allure_history: allure-history
          keep_reports: 20

      - name: Publish Report
        if: always()
        uses: peaceiris/actions-gh-pages@v2
        env:
          PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUBLISH_BRANCH: gh-pages
          PUBLISH_DIR: allure-history
