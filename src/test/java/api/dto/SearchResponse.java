package api.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.Data;
import lombok.Getter;

import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

@JsonIgnoreProperties(ignoreUnknown = true)
@Data
public class SearchResponse {
    private SearchData data;

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class SearchData {
        public String type;
        public String id;
        public Attributes attributes;
        public Relationships relationships;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Example {
        public SearchData data;
        public List<Included> included;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class FeatureVariants {
        public Object manualSearchandizing;
        public Object useEnrichedAttributesAsFuzzySearchable;
        public Object disableTestOnlyGlobalRulesBrowse;
        public Object customAutosuggestUi;
        public String autoGeneratedRefinedQueryRules;
        public Object useRerankerServiceForAll;
        public Object useRerankerServiceForBrowse;
        public String personalization;
        public String useRerankerServiceForSearch;
        public String filterItems;
        public Object aATest;
        public Object disableTestOnlyGlobalRulesSearch;
        public String queryItems;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Features {
        public boolean manualSearchandizing;
        public boolean useEnrichedAttributesAsFuzzySearchable;
        public boolean disableTestOnlyGlobalRulesBrowse;
        public boolean customAutosuggestUi;
        public boolean autoGeneratedRefinedQueryRules;
        public boolean useRerankerServiceForAll;
        public boolean useRerankerServiceForBrowse;
        public boolean personalization;
        public boolean useRerankerServiceForSearch;
        public boolean filterItems;
        public boolean aATest;
        public boolean disableTestOnlyGlobalRulesSearch;
        public boolean queryItems;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Filter {

        public String name;
        public String displayName;
        public String type;
        public List<Option> options;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Filters {

        public List<String> skuEnabledSites;
        public List<String> gender;
        public List<String> availAeoUs;
        public List<String> displayPriceAEOUS;
        public List<String> enabledSites;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class FmtOptions {

        public String groupsStart;
        public List<String> hiddenFacets;
        public boolean showHiddenFields;
        public boolean showHiddenFacets;
        public float groupsMaxDepth;
        public boolean showProtectedFacets;
        public List<String> hiddenFields;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Included {

        public String id;
        public String type;
        public Attributes__1 attributes;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Option {

        public String status;
        public String value;
        public String displayName;
        public int count;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Prices {

        public float maxListPrice;
        public float minSalePrice;
        public float minListPrice;
        public float maxSalePrice;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Products {

        public List<Datum> data;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Relationships {

        public Products products;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Request {

        public String section;
        public FilterMatchTypes filterMatchTypes;
        public SearchandizedItems searchandizedItems;
        public String sortBy;
        public Filters filters;
        public float numResultsPerPage;
        public FmtOptions fmtOptions;
        public Features features;
        public FeatureVariants featureVariants;
        public String term;
        public float page;
        public String sortOrder;
        public List<String> us;
        @Getter
        private Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Datum {

        public String id;
        public String type;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @Getter
    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class SearchandizedItems {

        private Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Sort {

        public String sortBy;
        public String displayName;
        public String sortOrder;
        public String status;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Attributes {

        public Request request;
        public int totalNumResults;
        public int page;
        public int resultsPerPage;
        public String originalTerm;
        public String matchedTerm;
        public List<Filter> filters;
        public List<Sort> sorts;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class Attributes__1 {

        public String displayName;
        public Object description;
        public String productUrl;
        public String imageUrl;
        public boolean isBundleable;
        public String brandName;
        public Prices prices;
        public List<String> merchantFlags;
        public List<String> plpSortMediaArray;
        public List<String> plpPromotionalMessage;
        public String plpMarketingMessage;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }

    @JsonIgnoreProperties(ignoreUnknown = true)
    @Data
    public static class FilterMatchTypes {

        public String skuEnabledSites;
        public String gender;
        public String availAeoUs;
        public String enabledSites;
        @Getter
        public Map<String, Object> additionalProperties = new LinkedHashMap<String, Object>();
    }


}
